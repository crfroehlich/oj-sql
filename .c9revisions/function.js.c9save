{"ts":1363458398541,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"   Function.prototype.inheritsFrom = function(parentClassOrObject) {\n        if (parentClassOrObject.constructor === Function) {\n            //Normal Inheritance\n            this.prototype = new parentClassOrObject;\n            this.prototype.constructor = this;\n            this.prototype.parent = parentClassOrObject.prototype;\n        } else {\n            //Pure Virtual Inheritance\n            this.prototype = parentClassOrObject;\n            this.prototype.constructor = this;\n            this.prototype.parent = parentClassOrObject;\n        }\n        return this;\n    };\n\nfunction makeClass(name, inheritsFrom, callBack) {\n        \n        var ret = function name() {\n            try {\n                if(inheritsFrom ) {\n                    inheritsFrom.apply(this, Array.prototype.slice.call(arguments, 0));\n                }\n                callBack.apply(this, Array.prototype.slice.call(arguments, 0));\n            } catch(e) {\n                console.error(e);\n            }\n        };\n        if(inheritsFrom) {\n            ret.inheritsFrom(inheritsFrom);\n        }\n        return ret;\n    }\n    \n    "]],"start1":0,"start2":0,"length1":0,"length2":1115}]],"length":1115}
