{"ts":1363395659334,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1363401035241,"patch":[[{"diffs":[[1,"function each(obj, onSuccess, recursive) {\r\n    if (obj) {\r\n        Object.keys(obj).forEach(function(key) {\r\n            var val = obj[key];\r\n            if (onSuccess) {\r\n                var quit = onSuccess(val);\r\n                if (false === quit) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (true === recursive) {\r\n                each(val, onSuccess, true);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction curryLeft(func) {\r\n   var slice = Array.prototype.slice;\r\n   var args = slice.call(arguments, 1);\r\n   return function() {\r\n       return func.apply(this, args.concat(args, slice.call(arguments, 0)));\r\n\r\n   }\r\n}\r\n\r\nfunction foldLeft(func,newArray,oldArray) {\r\n    var accumulation = newArray;\r\n    each(oldArray, function(val) {\r\n        accumulation = func(accumulation, val);\r\n    });\r\n    return accumulation;\r\n    \r\n}\r\n\r\nfunction map(func, array) {\r\n    var onIteration = function(accumulation, val) {\r\n        return accumulation.concat(func(val));\r\n    };\r\n    return foldLeft(onIteration, [], array)\r\n}\r\n\r\nfunction filter(func, array) {\r\n    var onIteration = function(accumulation, val) {\r\n        if(func(val)) {\r\n            return accumulation.concat(val);\r\n        } else {\r\n            return accumulation;\r\n        }\r\n    };\r\n    return foldLeft(onIteration, [], array)\r\n}\r\n\r\nArray.prototype._where = function(func) { return filter(func, this); }\r\nArray.prototype._select = function(func) { return map(func, this); }\r\n\r\nfunction select() {\r\n    var array = this;\r\n    var slice = Array.prototype.slice;\r\n    var args = slice.call(arguments, 0);\r\n    var cols = [];\r\n    each(args, function(argumentValue) {\r\n        cols.push(array._select(function(val) { return val[argumentValue]; }));\r\n    });\r\n    var ret = [];\r\n    if(cols.length === args.length && cols.length > 0) {\r\n        var col = cols[0];\r\n        \r\n        for(var r=0; r < col.length; r += 1) {\r\n            var thisRow = ret[r] || {};\r\n            for(var c=0; c < cols.length; c += 1) {\r\n                thisRow[args[c]] = cols[c][r];\r\n            }\r\n            ret.push(thisRow);\r\n        }\r\n    }\r\n    \r\n    return ret;\r\n    \r\n}\r\nArray.prototype.select = select;\r\n\r\nfunction from(array) {\r\n    return array;\r\n}\r\n\r\n\r\nvar peoples = [\r\n    { FirstName : \"John\", LastName : \"Doe\", Age : 29 },\r\n    { FirstName : \"Jane\", LastName : \"Doe\", Age : 33 },\r\n    { FirstName : \"Mary\", LastName : \"White\", Age : 31 },\r\n    { FirstName : \"Barry\", LastName : \"White\", Age : 31 },\r\n    { FirstName : \"Kevin\", LastName : \"Black\", Age : 31 },\r\n    { FirstName : \"Anna\", LastName : \"Smith\", Age : 1 }\r\n    \r\n];\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2638}]],"length":2638,"saved":false}
